#pragma kernel computeGrid
#pragma kernel generatePointCloud
#pragma kernel debugDisplayGridPoints
#pragma kernel computeGridForMesh
#pragma kernel computeMesh
#pragma kernel filterSolidsPerChunk
#pragma kernel compactPointCloud
#pragma kernel optimizePointCloud
#pragma kernel generatePointCloudMicroVoxels
#pragma kernel optimizeMicrovoxels
#pragma kernel computeGridMip3
RWStructuredBuffer<int> indirectChunkArgs2,indirectChunkArgs1;RWStructuredBuffer<float3> gridData;RWStructuredBuffer<int> boundingBox;RWStructuredBuffer<int2> pointCloudDataMip3;RWStructuredBuffer<int> gridPointersMip2,gridPointersMip3,pointCloudDataMip1;RWStructuredBuffer<int2> chunkPointCloudData;RWStructuredBuffer<int> pointCloudDataToSolidId,chunkPointCloudDataToSolidId;StructuredBuffer<int> triangleConnectionTable;RWStructuredBuffer<int> indirectDrawArgs,numSolidsPerChunk,updateChunks,solidsPerChunk,prefilteredSolidIds,solidsFilter;RWStructuredBuffer<float3> chunksCenter;RWStructuredBuffer<int> numPointsInChunk,pointToChunkId;RWStructuredBuffer<float2> gridDataLowRes;RWStructuredBuffer<int> volumetricDraw,chunkIdOffset,microvoxelCounters;RWStructuredBuffer<int2> pointCloudDataMip3Opt;RWStructuredBuffer<int> gridPointersMip2Opt,gridPointersMip3Opt;StructuredBuffer<float3> solidsPos;StructuredBuffer<float4> solidsRot;StructuredBuffer<float3> solidsScale;StructuredBuffer<float> solidsBlend;StructuredBuffer<int> solidsType;StructuredBuffer<float3> solidsColor;StructuredBuffer<float4> solidsAttrs,solidsAttrs2;StructuredBuffer<int> solidsClayObjectId,solidsUpdated;RWStructuredBuffer<int3> meshOutIndices;RWStructuredBuffer<float3> meshOutPoints;RWStructuredBuffer<float4> meshOutColors;uint maxSolids=0,maxSolidsPerVoxel=0,maxSolidsPerVoxelMask=0,chunkId=0,numSolids=0,numSolidsBlending=0;float chunkSize=20.;int numChunksX=0,numChunksY=0,numChunksZ=0,outMeshIndexOffset=0;float solidsMaxInfluence=0.;uint numSolidsUpdated=0;int storeSolidId=0,maxPointCount=0;float seamOffsetMultiplier=1.,bufferSizeReduceFactor=1.,globalBlendReduce=0.;Texture2D<float4> microvoxelRenderTex;RWStructuredBuffer<int> cullList;groupshared int3 gs_pointCloudData[255];groupshared uint gs_numElements=0,gs_globalOffset=0;
#include"claySDF.compute"
static const int3 cellTable[]={int3(0,0,0),int3(0,0,1),int3(0,0,2),int3(0,0,3),int3(0,1,0),int3(0,1,1),int3(0,1,2),int3(0,1,3),int3(0,2,0),int3(0,2,1),int3(0,2,2),int3(0,2,3),int3(0,3,0),int3(0,3,1),int3(0,3,2),int3(0,3,3),int3(1,0,0),int3(1,0,1),int3(1,0,2),int3(1,0,3),int3(1,1,0),int3(1,1,1),int3(1,1,2),int3(1,1,3),int3(1,2,0),int3(1,2,1),int3(1,2,2),int3(1,2,3),int3(1,3,0),int3(1,3,1),int3(1,3,2),int3(1,3,3),int3(2,0,0),int3(2,0,1),int3(2,0,2),int3(2,0,3),int3(2,1,0),int3(2,1,1),int3(2,1,2),int3(2,1,3),int3(2,2,0),int3(2,2,1),int3(2,2,2),int3(2,2,3),int3(2,3,0),int3(2,3,1),int3(2,3,2),int3(2,3,3),int3(3,0,0),int3(3,0,1),int3(3,0,2),int3(3,0,3),int3(3,1,0),int3(3,1,1),int3(3,1,2),int3(3,1,3),int3(3,2,0),int3(3,2,1),int3(3,2,2),int3(3,2,3),int3(3,3,0),int3(3,3,1),int3(3,3,2),int3(3,3,3)},localGridCellCoords[8]={int3(0,0,0),int3(1,0,0),int3(1,1,0),int3(0,1,0),int3(0,0,1),int3(1,0,1),int3(1,1,1),int3(0,1,1)};static const float3 vertexOffset[8]={float3(0,0,0),float3(1,0,0),float3(1,1,0),float3(0,1,0),float3(0,0,1),float3(1,0,1),float3(1,1,1),float3(0,1,1)};static const int2 edgeConnection[12]={int2(0,1),int2(1,2),int2(2,3),int2(3,0),int2(4,5),int2(5,6),int2(6,7),int2(7,4),int2(0,4),int2(1,5),int2(2,6),int2(3,7)};static const float3 edgeDirection[12]={float3(1.f,0.f,0.f),float3(0.f,1.f,0.f),float3(-1.f,0.f,0.f),float3(0.f,-1.f,0.f),float3(1.f,0.f,0.f),float3(0.f,1.f,0.f),float3(-1.f,0.f,0.f),float3(0.f,-1.f,0.f),float3(0.f,0.f,1.f),float3(0.f,0.f,1.f),float3(0.f,0.f,1.f),float3(0.f,0.f,1.f)},cardinalCellOffset[8]={float3(-1,-1,-1),float3(1,-1,-1),float3(1,1,-1),float3(-1,1,-1),float3(-1,-1,1),float3(1,-1,1),float3(1,1,1),float3(-1,1,1)};static const int cubeEdgeFlags[]={0,265,515,778,1030,1295,1541,1804,2060,2309,2575,2822,3082,3331,3593,3840,400,153,915,666,1430,1183,1941,1692,2460,2197,2975,2710,3482,3219,3993,3728,560,825,51,314,1590,1855,1077,1340,2620,2869,2111,2358,3642,3891,3129,3376,928,681,419,170,1958,1711,1445,1196,2988,2725,2479,2214,4010,3747,3497,3232,1120,1385,1635,1898,102,367,613,876,3180,3429,3695,3942,2154,2403,2665,2912,1520,1273,2035,1786,502,255,1013,764,3580,3317,4095,3830,2554,2291,3065,2800,1616,1881,1107,1370,598,863,85,348,3676,3925,3167,3414,2650,2899,2137,2384,1984,1737,1475,1226,966,719,453,204,4044,3781,3535,3270,3018,2755,2505,2240,2240,2505,2755,3018,3270,3535,3781,4044,204,453,719,966,1226,1475,1737,1984,2384,2137,2899,2650,3414,3167,3925,3676,348,85,863,598,1370,1107,1881,1616,2800,3065,2291,2554,3830,4095,3317,3580,764,1013,255,502,1786,2035,1273,1520,2912,2665,2403,2154,3942,3695,3429,3180,876,613,367,102,1898,1635,1385,1120,3232,3497,3747,4010,2214,2479,2725,2988,1196,1445,1711,1958,170,419,681,928,3376,3129,3891,3642,2358,2111,2869,2620,1340,1077,1855,1590,314,51,825,560,3728,3993,3219,3482,2710,2975,2197,2460,1692,1941,1183,1430,666,915,153,400,3840,3593,3331,3082,2822,2575,2309,2060,1804,1541,1295,1030,778,515,265,0};int f(int x,int i,int f,int y){return x+y*(i+y*f);}uint f(float3 i){uint e=uint(i.x*255)+uint(i.y*255)*256+uint(i.z*255)*256*256;return e;}uint f(uint i,uint x,uint f,uint y,uint e){uint t=(((i<<6|x)<<6|f)<<6|y)<<8|e;return t;}uint s(uint i,uint x,uint f,uint y,uint e){uint t=(((i<<6|x)<<8|f)<<8|y)<<4|e;return t;}uint f(uint i,uint x,uint e){uint t=(i<<6|x)<<18|e;return t;}uint f(uint f,uint e){uint t=f<<24|e;return t;}void s(int f,out int i[5]){i[4]=f&255,f>>=8,i[3]=f&63,f>>=6,i[2]=f&63,f>>=6,i[1]=f&63,f>>=6,i[0]=f&63;}uint s(float i,float f,float y,float x){uint r=uint(round(i*63.)),u=uint(round(f*63.)),z=uint(round(y*63.)),e=uint((x+1.)*.5*16383.),t=((r<<6|u)<<6|z)<<14|e;return t;}float4 s(uint i){float f=float(i&16383)/16383*2.-1.;i>>=14;float u=float(i&63)/63;i>>=6;float y=float(i&63)/63,r=float(i>>6)/63;return float4(r,y,u,f);}float t(float3 i,float3 e){float3 u=abs(i)-e;return max(u.x,max(u.y,u.z));}float t(float i,float f,float u,float e){float y=max(u-abs(i-f),0.);return min(i,f)-y*y*.25f*e;}float c(float f,float i,float u,float e){float y=max(u-abs(-f-i),0.);return max(-f,i)+y*y*.25*e;}bool c(uint e,uint f){uint x=f*rcp(32);int i=solidsFilter[e*maxSolidsPerVoxelMask+x],u=f-32*x;bool t=false;if(i>>u&1)t=true;return t;}void d(uint e,uint f){uint x=f/32;int t=solidsFilter[e*maxSolidsPerVoxelMask+x],i=f-32*x;solidsFilter[e*maxSolidsPerVoxelMask+x]=t&~(1<<i);}bool c(int f){return f>>0&1;}bool d(int f){return f>>2&1;}bool t(int f){return f>>3&1;}float c(float3 i,float f,float x,uint e,uint y){float u=999.;uint s=y*maxSolidsPerVoxel;float v=999.,z=0.,m=0.;bool g=false;for(uint r=0;r<e;++r){uint n=prefilteredSolidIds[s+r];float3 o=solidsScale[n];float M=(o.x+o.y+o.z)*.333333,S=solidsBlend[n],a=rcp(S);float4 k=solidsAttrs[n],p=solidsAttrs2[n];bool D=true;float b=999.;if(d(k.w))x+=abs(S),v=u,u=999.,z=S,m=a,D=false,g=true,S=0.,a=1.;else if(t(k.w))b=u,u=v,S=z,a=m,D=false,g=false;if(D)b=computeClayDistanceFunction(solidsType[n],i,solidsPos[n],solidsRot[n],o,k,p,M);if(!c(k.w)){if(S==0.)u=min(b,u);else if(S>0.)u=t(b,u,S,a);else u=c(b,u,abs(S),abs(a));}if(D&&b>x)d(y,r);if(D)x-=abs(S);}return u;}float c(float3 i,float f,float e,out int s,out float3 u,uint x,uint y,uint z){float r=999.;u=float3(1.,1.,1.);uint n=y*maxSolidsPerVoxel;float v=999.,a=0.,m=0.;float3 S=0.;bool g=false;int p=0,M=0;for(uint o=0;o<x;++o){if(!c(y,o)){continue;}uint k=prefilteredSolidIds[n+o];float3 b=solidsScale[k];float D=(b.x+b.y+b.z)*.333333,w=solidsBlend[k],l=rcp(w);float3 X=solidsColor[k];float4 F=solidsAttrs[k],Y=solidsAttrs2[k];bool Z=true;float C=999.;if(d(F.w))v=r,r=999.,a=w,m=l,S=u,Z=false,g=true,p=k,M=s;else if(t(F.w))C=r,r=v,w=a,l=m,k=p,Z=false,g=false;if(Z)C=computeClayDistanceFunction(solidsType[k],i,solidsPos[k],solidsRot[k],b,F,Y,D);if(!g&&C<r)s=k;float h=0.;bool O=c(F.w);if(w==0.){h=clamp((r-C)*e,0.,1.);if(!O)r=min(C,r);}else if(w>0.){h=1.-clamp(.5+.5*(C-r)*l,0.,1.);if(!O)r=t(C,r,w,l);}else{h=1.-clamp(.5+.5*(-C-r)*l,0.,1.);if(!O)r=c(C,r,abs(w),abs(l));if(h>.5)s=k;}if(!Z)X=lerp(S,u,h),h=1.-h;u=lerp(u,X,h);}return r;}float3 r(uint i){int u=(i&255)>>0,f=(i&65280)>>8,M=(i&16711680)>>16;return float3(u/255.,f/255.,M/255.);}int3 v(uint i){int f=(i&255)>>0,u=(i&65280)>>8,y=(i&16711680)>>16;return int3(f,u,y);}bool n(int3 i){if(i.x<0)return true;if(i.x>255)return true;if(i.y<0)return true;if(i.y>255)return true;if(i.z<0)return true;if(i.z>255)return true;return false;}float i(int4 f){float t=0.;for(uint i=0;i<numSolids;++i)t+=abs(solidsBlend[i]);return t;}float3 i(int3 f,float i){float t=i*.5,u=chunkSize*.5;float3 e=float3(i*f.x-u,i*f.y-u,i*f.z-u)+t;return e;}void d(float3 f,float y,uint c,inout uint i,inout float x){uint e=numSolidsPerChunk[chunkId],u=c*maxSolidsPerVoxel;int n=c*maxSolidsPerVoxelMask;float s=0.,v=0.;bool r=false;float k=0.,z=2.-globalBlendReduce;uint m=0;for(m=0;m<e;++m){uint g=solidsPerChunk[chunkId*maxSolids+m];float a=abs(solidsBlend[g]),M=solidsAttrs[g].w;float3 b=f;if(int(M)>>1&1)b.x=abs(b.x);float3 S=solidsScale[g],p=solidsPos[g];float4 D=solidsRot[g];float3 C=b-p,w=mulQuat(C,D);float o=t(w,S)-y*1.732;if(o<z){k+=a;if(k>1.){k=1.;break;}}}float S=z*k;for(m=0;m<e;++m){uint g=solidsPerChunk[chunkId*maxSolids+m];solidsFilter[n+m*rcp(32)]=-1;float3 M=solidsScale[g];float D=solidsAttrs[g].w;float3 b=f;if(int(D)>>1&1)b.x=abs(b.x);float a=abs(solidsBlend[g]);float3 p=solidsPos[g];float4 o=solidsRot[g];float3 C=b-p,w=mulQuat(C,o);float h=t(w,M)-y*1.732*2.;if(r)s+=S,v+=a;bool l=true;if(d(D))s=0.,v=0.,h=0.,r=true;else if(t(D))S=s,a=v,h=0.,l=false,r=false;if(h<S){prefilteredSolidIds[u+i]=g;i+=1;if(l)x+=S;if(i==maxSolidsPerVoxel){break;}}}}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void computeGrid(int3 i:SV_DispatchThreadID){float y=chunkSize*.5,u=chunkSize*.015625,o=u*.5,r=chunkSize*.00390625,M=r*.5,a=u*1.732,g=rcp(r);float3 t=float3(u*i.x-y,u*i.y-y,u*i.z-y);int x=f(i.x,i.y,i.z,64);float3 e=chunksCenter[chunkId];uint z=0;float s=0.;float3 S=t+o+e;d(S,u*.5,x,z,s);float k=c(S,u,s+u,z,x);gridDataLowRes[x]=float2(k,z);}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void computeGridMip3(uint3 i:SV_DispatchThreadID){float y=chunkSize*.5,u=chunkSize*.015625,r=chunkSize*.00390625,x=r*.5,z=u*1.732,S=rcp(r);int e=f(i.x/4,i.y/4,i.z/4,64),g=f(i.x,i.y,i.z,256);float2 t=gridDataLowRes[e];float s=t.x;int M=t.y;gridData[g]=float3(s,0,0);if(abs(s)<z){int k=0;float3 D=float3(1.,1.,1.),a=i*r+r-x-y,o=chunksCenter[chunkId];float b=c(a+o,x,S,k,D,M,e,g);int m=solidsClayObjectId[k]+1;gridData[g]=float3(b,f(D),m);}}float n(float f,float c){float i=c-f,u=.5;if(i!=0.)u=f/i;return u;}float2 p(float2 f){float2 e=f.xy>=0.?1.:-1.,i=(1.-abs(f.yx))*e;return i;}float g(float2 i){int u=32;float f=floor(i.x*(u-1)),e=floor(i.y*(u-1)),t=f*u+e;return t;}float k(float3 f){f/=abs(f.x)+abs(f.y)+abs(f.z);f.xy=f.z>=0.?f.xy:p(f.xy);f.xy=f.xy*.5+.5;float e=g(f.xy);return e;}int d(uint f,uint i,uint x,uint e){int t=f<<24|i<<16|x<<8|e;return t;}uint g(uint i,uint f,uint x,uint e){uint t=((i<<6|f)<<6|x)<<14|e;return t;}uint i(uint i,uint f,uint x,uint e){uint t=((i<<5|f)<<4|x)<<18|e;return t;}float x(float3 i){float e=dot(round(i*255),float3(65536,256,1));return e;}void g(int3 i,float x){if(i.x>254||i.y>254||i.z>254||i.x<1||i.y<1||i.z<1){return;}int e=f(i.x,i.y,i.z,256);float3 u=gridData[e];if(u.z==0.){return;}float s[8];uint t=0;for(int r=0;r<8;++r){int3 M=i+localGridCellCoords[r];int y=f(M.x,M.y,M.z,256);float3 c=gridData[y];if(c.z==0.){return;}s[r]=c.x;if(c.x<=0.)t|=1<<r;}int y=cubeEdgeFlags[t];if(y==0){return;}int g=t*16,m=triangleConnectionTable[g+3];float c=n(s[edgeConnection[m].x],s[edgeConnection[m].y]);float3 z=vertexOffset[edgeConnection[m].x]-c*edgeDirection[m];m=triangleConnectionTable[g+4];c=n(s[edgeConnection[m].x],s[edgeConnection[m].y]);float3 o=vertexOffset[edgeConnection[m].x]-c*edgeDirection[m];m=triangleConnectionTable[g+5];c=n(s[edgeConnection[m].x],s[edgeConnection[m].y]);float3 S=vertexOffset[edgeConnection[m].x]-c*edgeDirection[m],a=z+o+S,M=cross(S-z,o-z);if(dot(M,M)>0.){m=triangleConnectionTable[g];c=n(s[edgeConnection[m].x],s[edgeConnection[m].y]);z=vertexOffset[edgeConnection[m].x]-c*edgeDirection[m];m=triangleConnectionTable[g+1];c=n(s[edgeConnection[m].x],s[edgeConnection[m].y]);o=vertexOffset[edgeConnection[m].x]-c*edgeDirection[m];m=triangleConnectionTable[g+2];c=n(s[edgeConnection[m].x],s[edgeConnection[m].y]);S=vertexOffset[edgeConnection[m].x]-c*edgeDirection[m];M+=cross(S-z,o-z);m=triangleConnectionTable[g+6];c=n(s[edgeConnection[m].x],s[edgeConnection[m].y]);z=vertexOffset[edgeConnection[m].x]-c*edgeDirection[m];m=triangleConnectionTable[g+7];c=n(s[edgeConnection[m].x],s[edgeConnection[m].y]);o=vertexOffset[edgeConnection[m].x]-c*edgeDirection[m];m=triangleConnectionTable[g+8];c=n(s[edgeConnection[m].x],s[edgeConnection[m].y]);S=vertexOffset[edgeConnection[m].x]-c*edgeDirection[m];M+=cross(S-z,o-z);m=triangleConnectionTable[g+9];c=n(s[edgeConnection[m].x],s[edgeConnection[m].y]);z=vertexOffset[edgeConnection[m].x]-c*edgeDirection[m];m=triangleConnectionTable[g+10];c=n(s[edgeConnection[m].x],s[edgeConnection[m].y]);o=vertexOffset[edgeConnection[m].x]-c*edgeDirection[m];m=triangleConnectionTable[g+11];c=n(s[edgeConnection[m].x],s[edgeConnection[m].y]);S=vertexOffset[edgeConnection[m].x]-c*edgeDirection[m];M+=cross(S-z,o-z);M=normalize(M);a/=3;int D=u.y,w=u.z;float3 k=a-float3(.5,.5,.5);float b=dot(k,M);float3 R=M;R/=abs(R.x)+abs(R.y)+abs(R.z);R.xy=R.z>=0.?R.xy:p(R.xy);R.xy=R.xy*.5+.5;b=b*.5+.5;int3 C=v(D);int h=0;InterlockedAdd(gs_numElements,1,h);if(h<255)gs_pointCloudData[h]=int3(d(i.x,i.y,i.z,uint(round(R.x*255.))),f(uint(round(b*63.)),uint(round(C.x/256.*63.)),uint(round(C.y/256.*63.)),uint(round(C.z/256.*63.)),uint(round(R.y*255.))),w);}}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void generatePointCloud(int3 i:SV_DispatchThreadID,uint t:SV_GroupIndex){if(i.x>254||i.y>254||i.z>254||i.x<1||i.y<1||i.z<1){return;}float e=chunkSize/256;int m=f(i.x,i.y,i.z,256);float3 u=gridData[m];if(u.z==0.){return;}float s[8];uint c=0;for(int x=0;x<8;++x){int3 r=i+localGridCellCoords[x];int g=f(r.x,r.y,r.z,256);float3 b=gridData[g];if(b.z==0.){return;}s[x]=b.x;if(b.x<=0.)c|=1<<x;}int r=cubeEdgeFlags[c];if(r==0){return;}int g=c*16,y=triangleConnectionTable[g+3];float b=n(s[edgeConnection[y].x],s[edgeConnection[y].y]);float3 z=vertexOffset[edgeConnection[y].x]-b*edgeDirection[y];y=triangleConnectionTable[g+4];b=n(s[edgeConnection[y].x],s[edgeConnection[y].y]);float3 o=vertexOffset[edgeConnection[y].x]-b*edgeDirection[y];y=triangleConnectionTable[g+5];b=n(s[edgeConnection[y].x],s[edgeConnection[y].y]);float3 S=vertexOffset[edgeConnection[y].x]-b*edgeDirection[y],a=z+o+S,M=cross(S-z,o-z);if(dot(M,M)>0.){y=triangleConnectionTable[g];b=n(s[edgeConnection[y].x],s[edgeConnection[y].y]);z=vertexOffset[edgeConnection[y].x]-b*edgeDirection[y];y=triangleConnectionTable[g+1];b=n(s[edgeConnection[y].x],s[edgeConnection[y].y]);o=vertexOffset[edgeConnection[y].x]-b*edgeDirection[y];y=triangleConnectionTable[g+2];b=n(s[edgeConnection[y].x],s[edgeConnection[y].y]);S=vertexOffset[edgeConnection[y].x]-b*edgeDirection[y];M+=cross(S-z,o-z);y=triangleConnectionTable[g+6];b=n(s[edgeConnection[y].x],s[edgeConnection[y].y]);z=vertexOffset[edgeConnection[y].x]-b*edgeDirection[y];y=triangleConnectionTable[g+7];b=n(s[edgeConnection[y].x],s[edgeConnection[y].y]);o=vertexOffset[edgeConnection[y].x]-b*edgeDirection[y];y=triangleConnectionTable[g+8];b=n(s[edgeConnection[y].x],s[edgeConnection[y].y]);S=vertexOffset[edgeConnection[y].x]-b*edgeDirection[y];M+=cross(S-z,o-z);y=triangleConnectionTable[g+9];b=n(s[edgeConnection[y].x],s[edgeConnection[y].y]);z=vertexOffset[edgeConnection[y].x]-b*edgeDirection[y];y=triangleConnectionTable[g+10];b=n(s[edgeConnection[y].x],s[edgeConnection[y].y]);o=vertexOffset[edgeConnection[y].x]-b*edgeDirection[y];y=triangleConnectionTable[g+11];b=n(s[edgeConnection[y].x],s[edgeConnection[y].y]);S=vertexOffset[edgeConnection[y].x]-b*edgeDirection[y];M+=cross(S-z,o-z);M=normalize(M);a/=3;int D=u.y,k=u.z;float3 C=a-float3(.5,.5,.5);float R=dot(C,M);float3 h=M;h/=abs(h.x)+abs(h.y)+abs(h.z);h.xy=h.z>=0.?h.xy:p(h.xy);h.xy=h.xy*.5+.5;R=R*.5+.5;int3 w=v(D);uint l=0;InterlockedAdd(numPointsInChunk[chunkId],3,l);l/=3;int2 Z=int2(d(i.x,i.y,i.z,uint(round(h.x*255.))),f(uint(round(R*63.)),uint(round(w.x/256.*63.)),uint(round(w.y/256.*63.)),uint(round(w.z/256.*63.)),uint(round(h.y*255.))));chunkPointCloudData[chunkId*maxPointCount+l]=Z;if(storeSolidId==1)chunkPointCloudDataToSolidId[chunkId*maxPointCount+l]=k;}}int4 m(uint f){uint i=f>>24,u=(16711680&f)>>16,y=(65280&f)>>8,z=255&f;return int4(i,u,y,z);}void k(uint f,uint t){uint y=f/5,m=round(float(float(f)/5.-y)*5),i=pointToChunkId[y],s[5];s[0]=i&63;i>>=6;s[1]=i&63;i>>=6;s[2]=i&63;i>>=6;s[3]=i&63;i>>=6;s[4]=i&63;s[m]=t;uint e=(((s[4]<<6|s[3])<<6|s[2])<<6|s[1])<<6|s[0];pointToChunkId[y]=e;}uint m(uint f,uint i){uint y=f/5,u=6*round(float(float(f)/5.-y)*5),e=(1<<6)-1&i>>u;return e;}[numthreads(1,1,1)]void compactPointCloud(int3 f:SV_DispatchThreadID){int y=f.x+f.y*numChunksX+numChunksX*numChunksY*f.z;uint i=numPointsInChunk[y],u;InterlockedAdd(indirectDrawArgs[0],i,u);uint e=i/3;u/=3;for(uint m=0;m<e;++m){uint x=u+m;pointCloudDataMip3[x]=chunkPointCloudData[y*maxPointCount+m];k(x,y);if(storeSolidId==1)pointCloudDataToSolidId[x]=chunkPointCloudDataToSolidId[y*maxPointCount+m];}}[numthreads(1,1,1)]void optimizePointCloud(int3 i:SV_DispatchThreadID){uint f=indirectDrawArgs[0],u=f/3,y=u;for(uint e=0;e<u;++e){int4 s=m(pointCloudDataMip3[e].x);float r=frac(sin(dot(float2(s.x,s.y),float2(12.9898,78.233+s.z)))*43758.5);uint x=round(r*(y-1));y-=1;uint z=m(y,pointToChunkId[y/5]);int2 t=pointCloudDataMip3[y];pointCloudDataMip3[y]=pointCloudDataMip3[x];pointCloudDataMip3[x]=t;uint M=m(x,pointToChunkId[x/5]);k(y,M);k(x,z);}}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void debugDisplayGridPoints(int3 i:SV_DispatchThreadID){}float4 a(uint i){int u=(i&255)>>0,f=(i&65280)>>8,M=(i&16711680)>>16;return float4(u/255.,f/255.,M/255.,1.);}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void computeGridForMesh(int3 u:SV_DispatchThreadID){float y=chunkSize/64;float3 s=i(u,y);int x=f(u.x,u.y,u.z,64);float3 e=chunksCenter[chunkId];uint z=0;float M=0.;d(s+e,y*.5,x,z,M);float t=y*.25,S=t*.5,r=y*.5,m=chunkSize/256,o=chunkSize*.5;int g=x*maxSolidsPerVoxelMask;for(uint b=0;b<maxSolidsPerVoxelMask;++b)solidsFilter[g+b]=-1;float k=c(s+e,y,M+y,z,x);for(uint n=0;n<8;++n){float3 v=s+t*cardinalCellOffset[n];for(uint D=0;D<8;++D){float3 h=v+S*cardinalCellOffset[D];int3 a=int3(round((h.x+o-S)/m),round((h.y+o-S)/m),round((h.z+o-S)/m));int w=f(a.x,a.y,a.z,256);gridData[w]=float3(0,0,0);int p=0;float3 C=float3(1.,1.,1.);float l=c(h+e,S,rcp(t),p,C,z,x,w);int Z=solidsClayObjectId[p]+1;gridData[w]=float3(l,f(C),Z);}}}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void e(int3 i:SV_DispatchThreadID){}float3 a(int3 u,out float3 m){float e=chunkSize/256;int y=f(u.x,u.y,u.z,256);float3 s=gridData[y];m=a(s.y).xyz;float t[8];int x=0,M=0;for(int r=0;r<8;++r){int3 b=u+localGridCellCoords[r];int g=f(b.x,b.y,b.z,256);float3 c=gridData[g];t[r]=c.x;if(c.z==0.){continue;}if(c.x<0.)x|=1<<r;}int b=cubeEdgeFlags[x];float3 c=i(u,e);int g=0;float3 z=float3(0,0,0);for(int o=0;o<12;++o){if((b&1<<o)!=0){float S=t[edgeConnection[o].x],D=t[edgeConnection[o].y],p=n(S,D);z+=c+(vertexOffset[edgeConnection[o].x]-p*edgeDirection[o])*e;g+=1;}}z/=g;return z;}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void computeMesh(int3 i:SV_DispatchThreadID){if(i.x>253||i.y>253||i.z>253){return;}else if(i.x<1||i.y<1||i.z<1){return;}int y=f(i.x+1,i.y+1,i.z+1,256);float3 u=gridData[y],s,z,x,r,e=chunksCenter[chunkId],t=a(int3(i.x,i.y,i.z),s)+e,c,m,S,M;int g=f(i.x,i.y+1,i.z+1,256);float3 b=gridData[g];if(sign(u.x)!=sign(b.x)){c=a(int3(i.x,i.y,i.z+1),z)+e;m=a(int3(i.x,i.y+1,i.z+1),x)+e;S=a(int3(i.x,i.y+1,i.z),r)+e;if(u.x>b.x)M=S,S=c,c=M,M=r,r=z,z=M;uint k=meshOutIndices.IncrementCounter();int n=k*3;meshOutPoints[n]=t;meshOutIndices[k][0]=n+outMeshIndexOffset;meshOutColors[n]=float4(s,1);n=k*3+1;meshOutPoints[n]=c;meshOutIndices[k][1]=n+outMeshIndexOffset;meshOutColors[n]=float4(z,1);n=k*3+2;meshOutPoints[n]=m;meshOutIndices[k][2]=n+outMeshIndexOffset;meshOutColors[n]=float4(x,1);k=meshOutIndices.IncrementCounter();n=k*3;meshOutPoints[n]=t;meshOutIndices[k][0]=n+outMeshIndexOffset;meshOutColors[n]=float4(s,1);n=k*3+1;meshOutPoints[n]=m;meshOutIndices[k][1]=n+outMeshIndexOffset;meshOutColors[n]=float4(x,1);n=k*3+2;meshOutPoints[n]=S;meshOutIndices[k][2]=n+outMeshIndexOffset;meshOutColors[n]=float4(r,1);}g=f(i.x+1,i.y,i.z+1,256);b=gridData[g];if(sign(u.x)!=sign(b.x)){c=a(int3(i.x,i.y,i.z+1),z)+e;m=a(int3(i.x+1,i.y,i.z+1),x)+e;S=a(int3(i.x+1,i.y,i.z),r)+e;if(u.x<b.x)M=S,S=c,c=M,M=r,r=z,z=M;uint n=meshOutIndices.IncrementCounter();int k=n*3;meshOutPoints[k]=t;meshOutIndices[n][0]=k+outMeshIndexOffset;meshOutColors[k]=float4(s,1);k=n*3+1;meshOutPoints[k]=c;meshOutIndices[n][1]=k+outMeshIndexOffset;meshOutColors[k]=float4(z,1);k=n*3+2;meshOutPoints[k]=m;meshOutIndices[n][2]=k+outMeshIndexOffset;meshOutColors[k]=float4(x,1);n=meshOutIndices.IncrementCounter();k=n*3;meshOutPoints[k]=t;meshOutIndices[n][0]=k+outMeshIndexOffset;meshOutColors[k]=float4(s,1);k=n*3+1;meshOutPoints[k]=m;meshOutIndices[n][1]=k+outMeshIndexOffset;meshOutColors[k]=float4(x,1);k=n*3+2;meshOutPoints[k]=S;meshOutIndices[n][2]=k+outMeshIndexOffset;meshOutColors[k]=float4(r,1);}g=f(i.x+1,i.y+1,i.z,256);b=gridData[g];if(sign(u.x)!=sign(b.x)){c=a(int3(i.x,i.y+1,i.z),z)+e;m=a(int3(i.x+1,i.y+1,i.z),x)+e;S=a(int3(i.x+1,i.y,i.z),r)+e;if(u.x>b.x)M=S,S=c,c=M,M=r,r=z,z=M;uint k=meshOutIndices.IncrementCounter();int n=k*3;meshOutPoints[n]=t;meshOutIndices[k][0]=n+outMeshIndexOffset;meshOutColors[n]=float4(s,1);n=k*3+1;meshOutPoints[n]=c;meshOutIndices[k][1]=n+outMeshIndexOffset;meshOutColors[n]=float4(z,1);n=k*3+2;meshOutPoints[n]=m;meshOutIndices[k][2]=n+outMeshIndexOffset;meshOutColors[n]=float4(x,1);k=meshOutIndices.IncrementCounter();n=k*3;meshOutPoints[n]=t;meshOutIndices[k][0]=n+outMeshIndexOffset;meshOutColors[n]=float4(s,1);n=k*3+1;meshOutPoints[n]=m;meshOutIndices[k][1]=n+outMeshIndexOffset;meshOutColors[n]=float4(x,1);n=k*3+2;meshOutPoints[n]=S;meshOutIndices[k][2]=n+outMeshIndexOffset;meshOutColors[n]=float4(r,1);}}[numthreads(1,1,1)]void filterSolidsPerChunk(int3 i:SV_DispatchThreadID){int y=i.x+i.y*numChunksX+numChunksX*numChunksY*i.z;float f=chunkSize*.00390625*seamOffsetMultiplier,u=chunkSize-f,M=chunkSize*.5;float3 e=float3(-(chunkSize*numChunksX*.5)+M+u*i.x,-(chunkSize*numChunksY*.5)+M+u*i.y,-(chunkSize*numChunksZ*.5)+M+u*i.z);chunksCenter[y]=e;int m=y*3,r=updateChunks[y]-1;if(r<-1)r=-1;int x=0;float c=chunkSize*.5,z=2.-globalBlendReduce;for(uint n=0;n<numSolids;++n){float3 s=e;if(checkMirrorX(solidsAttrs[n].w))s.x=abs(s.x);float3 S=solidsPos[n],D=solidsScale[n];float4 g=solidsRot[n];float3 b=s-S,k=mulQuat(b,g);float o=t(k,D)-z;if(abs(o)<chunkSize*.8){solidsPerChunk[y*maxSolids+x]=n;x+=1;if(r<=0){for(uint a=0;a<numSolidsUpdated;++a){uint h=solidsUpdated[a];if(h==n){r=1;break;}}}}}numSolidsPerChunk[y]=x;uint s=0,S=0;if(r>-1){s=64/MAXTHREADS;S=256/MAXTHREADS;uint g=y*6;boundingBox[g]=64;boundingBox[g+1]=64;boundingBox[g+2]=64;boundingBox[g+3]=0;boundingBox[g+4]=0;boundingBox[g+5]=0;numPointsInChunk[y]=0;}updateChunks[y]=r;indirectChunkArgs1[m]=s;indirectChunkArgs1[m+1]=s;indirectChunkArgs1[m+2]=s;indirectChunkArgs2[m]=S;indirectChunkArgs2[m+1]=S;indirectChunkArgs2[m+2]=S;}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void generatePointCloudMicroVoxels(int3 i:SV_DispatchThreadID){int y=f(i.x,i.y,i.z,64);uint e=262144,u=chunkId*e,m=u+y;gridPointersMip2[m]=-1;if(gridDataLowRes[y].x==999.){return;}float3 c=float3(0,0,0),s=float3(0,0,0),M=float3(0,0,0);int t=0;for(uint x=0;x<64;++x){int3 r=cellTable[x],z=int3(i.x*4+r.x,i.y*4+r.y,i.z*4+r.z);uint S=f(uint(r.x),uint(r.y),uint(r.z),4),k=0;float a[8]={0,0,0,0,0,0,0,0};int b=0,D=0;for(int o=0;o<8;++o){int3 h=z+localGridCellCoords[o];if(h.x<1||h.y<1||h.z<1||h.x>253||h.y>253||h.z>253){return;}int C=f(h.x,h.y,h.z,256);float3 R=gridData[C];float w=R.x;if(w==0.){continue;}a[o]=w;if(w<=0.)k|=1<<o,D=R.z,b=R.y;}int h=cubeEdgeFlags[k];if(h==0){continue;}int C=k*16;float3 R=float3(0,0,0),w=float3(0,0,0);int l=0;for(int I=0;I<5;++I){int Z=I*3,F=triangleConnectionTable[C+Z];if(F>-1){float X=n(a[edgeConnection[F].x],a[edgeConnection[F].y]);float3 O=vertexOffset[edgeConnection[F].x]-X*edgeDirection[F];F=triangleConnectionTable[C+Z+1];X=n(a[edgeConnection[F].x],a[edgeConnection[F].y]);float3 Y=vertexOffset[edgeConnection[F].x]-X*edgeDirection[F];F=triangleConnectionTable[C+Z+2];X=n(a[edgeConnection[F].x],a[edgeConnection[F].y]);float3 P=vertexOffset[edgeConnection[F].x]-X*edgeDirection[F];R+=O+Y+P;w+=cross(P-O,Y-O);l+=3;}else{break;}}if(l>0){R/=l;float3 Z=R-.5;w=normalize(w);float X=dot(Z,w);X=X*.5+.5;c+=R;s+=w;float3 F=w;F/=abs(F.x)+abs(F.y)+abs(F.z);F.xy=F.z>=0.?F.xy:p(F.xy);F.xy=F.xy*.5+.5;int3 Y=v(b);float3 O=float3(Y.x*.00390625,Y.y*.00390625,Y.z*.00390625);M+=O;uint P=d(S,uint(round(X*255.)),uint(round(F.x*255.)),uint(round(F.y*255.))),T=g(uint(round(O.x*63.)),uint(round(O.y*63.)),uint(round(O.z*63.)),D),A=y*128+t*2;prefilteredSolidIds[A]=P;prefilteredSolidIds[A+1]=T;t+=1;}}if(t>0){c/=t;s=normalize(s);M/=t;float3 r=c-.5;float b=dot(r,s);b=b*.5+.5;float3 S=s;S/=abs(S.x)+abs(S.y)+abs(S.z);S.xy=S.z>=0.?S.xy:p(S.xy);S.xy=S.xy*.5+.5;uint k=chunkId*(16777216*bufferSizeReduceFactor),z=0;InterlockedAdd(volumetricDraw[7],64,z);for(uint o=0;o<64;++o)gridPointersMip3[k+z+o]=-1;uint a=0;InterlockedAdd(volumetricDraw[6],t+1,a);uint R=0;for(int D=0;D<t;++D){uint F=y*128+D*2;int2 h=int2(prefilteredSolidIds[F],prefilteredSolidIds[F+1]);pointCloudDataMip3[k+a+D+1]=h;R=h.x>>24;gridPointersMip3[k+z+R]=f(D,a);}uint h=uint(round(S.x*255.)),w=uint(round(S.y*255.)),l=uint(round(b*255.)),Z=d(t,h,w,l);int2 C=int2(z,Z);pointCloudDataMip3[k+a]=C;gridPointersMip2[m]=a;uint F=chunkId*6;InterlockedMin(boundingBox[F],i.x);InterlockedMin(boundingBox[F+1],i.y);InterlockedMin(boundingBox[F+2],i.z);InterlockedMax(boundingBox[F+3],i.x);InterlockedMax(boundingBox[F+4],i.y);InterlockedMax(boundingBox[F+5],i.z);}}[numthreads(1,1,1)]void optimizeMicrovoxels(int3 i:SV_DispatchThreadID){int y=i.x+i.y*numChunksX+numChunksX*numChunksY*i.z;bool u=true;uint e=262144;for(uint x=0;x<e;++x){int s=gridPointersMip2[y*e+x];if(s>-1){u=false;break;}}if(u){return;}uint t=0;InterlockedAdd(microvoxelCounters[0],262144,t);chunkIdOffset[y]=t;uint g=y*(16777216*bufferSizeReduceFactor);for(uint r=0;r<e;++r){int s=gridPointersMip2[y*e+r];gridPointersMip2Opt[t+r]=-1;if(s>-1){int z=0;InterlockedAdd(microvoxelCounters[1],64,z);uint M=m(pointCloudDataMip3[g+s].y).x;for(uint n=0;n<64;++n)gridPointersMip3Opt[z+n]=-1;uint k=0;InterlockedAdd(microvoxelCounters[2],M+1,k);for(uint S=0;S<M;++S){int o=pointCloudDataMip3[g+s+S+1].x>>24;gridPointersMip3Opt[z+o]=f(S,k);pointCloudDataMip3Opt[k+S+1]=pointCloudDataMip3[g+s+S+1];}int2 c=int2(z,pointCloudDataMip3[g+k].y);pointCloudDataMip3Opt[k]=c;gridPointersMip2Opt[t+r]=k;}}}